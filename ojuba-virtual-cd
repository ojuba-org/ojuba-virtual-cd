#! /usr/bin/env python
# -*- coding: UTF-8 -*-
"""
Ojuba Virtual CD
Copyright (c) 2008-2009 Muayyad Saleh Alsadi<alsadi@ojuba.org>

PyGTK+ front-end for fuseiso

    Released under terms of Waqf Public License.
    This program is free software; you can redistribute it and/or modify
    it under the terms of the latest version Waqf Public License as
    published by Ojuba.org.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    The Latest version of the license can be found on
    "http://www.ojuba.org/wiki/doku.php/رخصة_وقف_العامة"

"""

import sys,os,os.path
import time
import gtk
import gobject
from subprocess import Popen,PIPE
import gettext
import re
from glob import glob

label_re=re.compile(r"""'([^']+)'""")

mount_prefix=os.path.expanduser('~/.virtuals')
tr,box,popup_menu,mounted_menu,umount_menu_item,about_dlg,dlg=None,None,None,None,None,None,None
_ps=[]
gettext.install('ojuba-virtual-cd', "/usr/share/locale", unicode=0)

def run_in_bg(cmd):
  global _ps
  setsid = getattr(os, 'setsid', None)
  if not setsid: setsid = getattr(os, 'setpgrp', None)
  _ps=filter(lambda x: x.poll()!=None,_ps) # remove terminated processes from _ps list
  _ps.append(Popen(cmd,0,'/bin/sh',shell=True, preexec_fn=setsid))

def get_pids(l):
  pids=[]
  for i in l:
    p=Popen(['/sbin/pidof',i], 0, stdout=PIPE)
    l=p.communicate()[0].strip().split()
    r=p.returncode
    if r==0: pids.extend(l)
  pids.sort()
  return pids

def get_desktop():
  """return 1 for kde, 0 for gnome, -1 none of them"""
  l=get_pids(('kwin','ksmserver',))
  if l: kde=l[0]
  else: kde=None
  l=get_pids(('gnome-session',))
  if l: gnome=l[0]
  else: gnome=None
  if kde:
    if not gnome or kde<gnome: return 1
    else: return 0
  if gnome: return 0
  else: return -1

def run_file_man(mp):
  if get_desktop()==0: run_in_bg("nautilus --no-desktop '%s'" % mp)
  elif get_desktop()==1: run_in_bg("konqueror '%s'" % mp)
  elif os.path.exists('/usr/bin/thunar'): run_in_bg("thunar '%s'" % mp)
  elif os.path.exists('/usr/bin/pcmanfm'): run_in_bg("pcmanfm '%s'" % mp)
  elif os.path.exists('/usr/bin/nautilus'): run_in_bg("nautilus --no-desktop '%s'" % mp)
  elif os.path.exists('/usr/bin/konqueror'): run_in_bg("konqueror '%s'" % mp)

def main():
	global tr,box
	check_mount_prefix()
	for i in glob(os.path.join(mount_prefix,'*')):
	  if os.path.isdir(i):
	    try: os.rmdir(i)
	    except: pass
	tr = gtk.StatusIcon ()
	tr.connect ('button-press-event', clicked_cb)
	tr.set_title(_("OjubaVirtualCD"))
	tr.set_from_stock(gtk.STOCK_CDROM)
	tr.set_visible(False)
	tr.set_visible(True)
	setup_popup_menu()

	build_about()
	build_mount_dlg()
	if len(sys.argv)>1:
		if (sys.argv[1]!='--hidden'):
			for i in sys.argv[1:]: mount_f(i)
	else: mount_cb()
	
	refresh_cb()
	gobject.timeout_add(15000, refresh_timer)

	gtk.main()

def hide_cb(w, *args): w.hide(); return True

def build_about():
	global about_dlg
	about_dlg=gtk.AboutDialog()
	about_dlg.set_default_response(gtk.RESPONSE_CLOSE)
	about_dlg.connect('delete-event', hide_cb)
	about_dlg.connect('response', hide_cb)
	try: about_dlg.set_program_name("ojuba-virtual-cd")
	except: pass
	about_dlg.set_name(_("Ojuba Virtual CD"))
	#about_dlg.set_version(version)
	about_dlg.set_copyright("Copyright (c) 2008-2009 Muayyad Saleh Alsadi <alsadi@ojuba.org>")
	about_dlg.set_comments(_("Mount CD/DVD images (iso, nrg, bin, mdf, img, ..etc.)"))
	about_dlg.set_license("""
    Released under terms on Waqf Public License.
    This program is free software; you can redistribute it and/or modify
    it under the terms of the latest version Waqf Public License as
    published by Ojuba.org.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    The Latest version of the license can be found on
    "http://www.ojuba.org/wiki/doku.php/waqf/license"

""")
	about_dlg.set_website("http://virtualcd.ojuba.org/")
	about_dlg.set_website_label("http://virtualcd.ojuba.org")
	about_dlg.set_authors(["Muayyad Saleh Alsadi <alsadi@ojuba.org>"])
#	about_dlg.set_documenters(documenters)
#	about_dlg.set_artists(artists)
#	about_dlg.set_translator_credits(translator_credits)
#	about_dlg.set_logo(logo)
#	about_dlg.set_logo_icon_name(icon_name)

def setup_popup_menu():
	global popup_menu,box,mounted_menu,umount_menu_item

	popup_menu = gtk.Menu()
	i = gtk.MenuItem(_("Mount image"))
	i.connect('activate', mount_cb)
	popup_menu.add(i)

	mounted_menu = gtk.Menu()
        mounted_menu.add(gtk.SeparatorMenuItem())
	i = gtk.ImageMenuItem(gtk.STOCK_REFRESH)
	i.set_always_show_image(True)
	i.connect('activate', refresh_cb)
        mounted_menu.add(i)

	umount_menu_item=i= gtk.MenuItem(_("unmount"))
	i.set_submenu(mounted_menu)
        popup_menu.add(i)

        popup_menu.add(gtk.SeparatorMenuItem())

	i = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
	i.set_always_show_image(True)
        i.connect('activate', about_cb)
        popup_menu.add(i)
	i = gtk.ImageMenuItem(gtk.STOCK_QUIT)
	i.set_always_show_image(True)
        i.connect('activate', gtk.main_quit)
        popup_menu.add(i)

def bad(msg):
	dlg = gtk.MessageDialog (None,
			gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
			gtk.MESSAGE_ERROR, gtk.BUTTONS_CLOSE,
			msg)
	dlg.run()
	dlg.destroy()
def check_mount_prefix():
	if not os.path.exists(mount_prefix):
		try: os.makedirs(mount_prefix)
		except OSError:
			bad( _("Mount prefix [%s] is not found, please create it.") % mount_prefix )
			sys.exit(1)

def build_mount_dlg():
	global dlg;
	ff=gtk.FileFilter()
	ff.add_mime_type('application/x-cd-image')
        for i in ('iso','nrg', 'bin','mdf','img'):
        	l=list(i)
        	ff.add_pattern('*.[%s%s][%s%s][%s%s]' % ( l[0],l[0].upper(), l[1],l[1].upper(), l[2],l[2].upper()))
	dlg=gtk.FileChooserDialog(_("Select CD/DVD image file"),buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
	dlg.set_filter(ff)
	dlg.connect('delete-event', hide_cb)
	dlg.connect('response', hide_cb)

def get_label_from_blkid(fn):
	try:
		p=Popen(['blkid','-o','value','-s','LABEL',fn], 0, stdout=PIPE)
		l=p.communicate()[0].strip()
	except: return None
	r=p.returncode
	if r==0 and l and len(l)>0: return l
	else: return None
def get_label_from_file(fn):
	try:
		p=Popen(['file',fn], 0, stdout=PIPE)
		o=p.communicate()[0].split(':',1)[1].strip()
		l=label_re.findall(o)[0].strip()
	except: return None
	r=p.returncode
	if r==0 and l and len(l)>0: return l
	else: return None
def get_label(fn):
	return get_label_from_blkid(fn) or get_label_from_file(fn)

def mount_f(fn):
	if not os.path.exists(fn): bad(_("File does not exist")); return -1
	l=get_label(fn)
	if not l: l=os.path.basename(fn)
	mp=os.path.join( mount_prefix, l )
	if os.path.exists(mp):
		if os.path.ismount(os.path.join(mp)): bad(_("Already mounted")); return -2
		try: os.rmdir(mp)
		except OSError: bad(_("Mount point [%s] already exists, remove it please!") % mp); return -1
	try: os.mkdir(mp)
	except: bad(_('Could not create folder [%s]') % mp.decode(sys.getfilesystemencoding()) ); return -1
	
	r=os.system("fuseiso -c UTF8 '%s' '%s'" % (fn, mp))
	if r: bad(_("could not mount [%s]") % mp); return -1
	else: run_file_man(mp)
	refresh_cb()
	return 0
def mount_cb(*args):
	global dlg
	if (dlg.run()==gtk.RESPONSE_ACCEPT):
		mount_f(dlg.get_filename())
	dlg.hide()
	
def umount_cb(i, mp): 
	mpp=os.path.join(mount_prefix,mp.encode(sys.getfilesystemencoding()))
	r=os.system("fusermount -u '%s'" % mpp)
	if r: bad(_("could not unmount [%s]") % mp)
	else: os.rmdir(mpp)
	refresh_cb()

def refresh_cb(*args):
	global popup_menu, mounted_menu, umount_menu_item
	popup_menu.popdown()
	mm = gtk.Menu()
	for i in os.listdir(mount_prefix):
		if (os.path.ismount(os.path.join(mount_prefix,i))): j=gtk.MenuItem(i.decode(sys.getfilesystemencoding())); mm.add(j); j.connect('activate', umount_cb, i)
        mm.add(gtk.SeparatorMenuItem())
	i = gtk.ImageMenuItem(gtk.STOCK_REFRESH)
	i.connect('activate', refresh_cb)
        mm.add(i)
        mounted_menu=mm
	s=umount_menu_item.get_submenu()
	umount_menu_item.set_submenu(mm)
	del s
def refresh_timer(*args):
	refresh_cb(); return True;

def clicked_cb(widget, event):
	if event.button == 3: show_popup_menu(widget)

def show_cb(*args): win.show_all()
def about_cb(*args):
	global about_dlg
	about_dlg.run()
	
def show_popup_menu(icon):
	global popup_menu
	popup_menu.show_all()
	popup_menu.popup(None, None, gtk.status_icon_position_menu, 3, gtk.get_current_event_time(), icon)


bus, bus_name, bus_object=None,None,None
try:
  import dbus
  import dbus.service
  #import gobject # for gobject.MainLoop() if no gtk is to be used
  from dbus.mainloop.glib import DBusGMainLoop

  dbus_loop = DBusGMainLoop(set_as_default=True)
  bus = dbus.SessionBus()
except ImportError: pass

def init_dbus():
  global bus_name, bus_object
  if not bus: return
  class Manager(dbus.service.Object):
    def __init__(self, bus, path):
          dbus.service.Object.__init__(self,bus,path)

    @dbus.service.method("org.ojuba.VirtualCD", in_signature='as', out_signature='i')
    def Mount(self,a):
      r=0
      for fn in a: r|=mount_f(fn)
      return r

    @dbus.service.method("org.ojuba.VirtualCD", in_signature='', out_signature='s')
    def Version(self):
      return "0.3.0"
  # values from /usr/include/dbus-1.0/dbus/dbus-shared.h
  r=bus.request_name('org.ojuba.VirtualCD', flags=0x4)
  if r!=1:
    print "Another process own OjubaVirtualCD Service, pass request to it: "
    trials=0; appletbus=False
    while(appletbus==False and trials<20):
      print ".",
      try:
        appletbus=bus.get_object("org.ojuba.VirtualCD","/Manager"); break
      except:
        appletbus=False
      time.sleep(1); trials+=1
    print "*"
    if len(sys.argv)==1: print "already running and no arguments passed"; exit(-1)
    if appletbus: exit(appletbus.Mount(sys.argv[1:],dbus_interface='org.ojuba.VirtualCD'))
    else: print "unable to connect"
    exit(-1)
  bus_name = dbus.service.BusName("org.ojuba.VirtualCD", bus)
  bus_object = Manager(bus, '/Manager')

init_dbus()
main()

